{"version":3,"sources":["services/personService.js","components/PersonForm.js","components/BookRow.js","components/Persons.js","components/Filter.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","then","response","data","newPerson","post","id","changedPerson","put","delete","PersonForm","onSubmit","name","onNameChange","number","onNumberChange","value","onChange","e","target","type","BookRow","person","onDelete","onClick","window","confirm","Persons","persons","filter","rows","toLowerCase","startsWith","map","key","Filter","onFilterChange","Notification","message","success","className","App","useState","setPersons","setFilter","newName","setNewName","newNumber","setNewNumber","notification","setNotification","setSuccess","useEffect","personService","makeNotification","isSuccess","setTimeout","preventDefault","personExists","find","catch","err","returnedPerson","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.319c57c5.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = '/api/persons';\r\n\r\nconst getAll = () => {\r\n  const response = axios.get(BASE_URL);\r\n  return response.then(response => response.data);\r\n}\r\n\r\nconst create = newPerson => {\r\n  const response = axios.post(BASE_URL, newPerson);\r\n  return response.then(response => response.data);\r\n}\r\n\r\nconst update = (id, changedPerson) => {\r\n  const response = axios.put(`${BASE_URL}/${id}`, changedPerson);\r\n  return response.then(response => response.data);\r\n}\r\n\r\nconst deleteOne = id => {\r\n  const response = axios.delete(`${BASE_URL}/${id}`);\r\n  return response.then(response => response.data);\r\n}\r\n\r\nexport default { getAll, create, update, deleteOne };","import React from 'react';\r\n\r\nconst PersonForm = ({ onSubmit, name, onNameChange, number, onNumberChange }) => {\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <h4>Add new</h4>\r\n      <div>\r\n        name: <input value={name} onChange={(e) => onNameChange(e.target.value)} />\r\n      </div>\r\n      <div>\r\n        number: <input value={number} onChange={(e) => onNumberChange(e.target.value)} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm;","import React from 'react';\r\n\r\nconst BookRow = ({ person, onDelete }) => {\r\n\r\n  const { id, name, number } = person;\r\n\r\n  const handleDeletePress = () => {\r\n    if (window.confirm(`Delete ${name}??`)) {\r\n      onDelete(id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {name} {number}\r\n      <button onClick={handleDeletePress}>delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BookRow;","import React from 'react';\r\nimport BookRow from './BookRow';\r\n\r\nconst Persons = ({ persons, filter, onDelete }) => {\r\n  const rows = persons\r\n    .filter(person => person.name.toLowerCase().startsWith(filter.toLowerCase()))\r\n    .map((person) => <BookRow key={person.id} person={person} onDelete={onDelete} />)\r\n\r\n  return (\r\n    <div>\r\n      {rows}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Persons;","import React from 'react';\r\n\r\nconst Filter = ({ onFilterChange }) => {\r\n  return (\r\n    <div>\r\n      filter names starting with\r\n      <input onChange={onFilterChange} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst Notification = ({ message, success }) => {\r\n\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={`notification ${success ? 'notification--success' : 'notification--danger'}`}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport personService from './services/personService';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Filter from './components/Filter';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [notification, setNotification] = useState(null);\n  const [success, setSuccess] = useState(true);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(persons => {\n        setPersons(persons);\n      })\n  }, [])\n\n  const handleAddPerson = (e) => {\n    // Prevent page refresh\n    e.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    // Person already exists\n    const personExists = persons.find(person => person.name === newPerson.name);\n    if (personExists) {\n      const replace =\n        window.confirm(`${newPerson.name} is already added to phonebook, replace old number with the new one?`);\n\n      if (replace) {\n\n        personService\n          .update(personExists.id, newPerson)\n          .then(changedPerson => {\n            setPersons(persons.map(person => person.id !== changedPerson.id ? person : changedPerson));\n            makeNotification(`Changed ${personExists.name}'s number`, true);\n          })\n          .catch(err => {\n            makeNotification(`Information on ${personExists.name} has been removed from the server`);\n            setPersons(persons.filter(person => person.id !== personExists.id));\n          });\n      }\n\n      return;\n    }\n\n    personService\n      .create(newPerson)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n        makeNotification(`Added ${returnedPerson.name}`, true);\n        // Clear input fields\n        setNewName('');\n        setNewNumber('');\n      })\n      .catch(err => {\n        makeNotification(`Can't add person, ${err}`, false);\n      });\n  }\n\n  const handleFilterChange = e => {\n    setFilter(e.target.value);\n  }\n\n  const handleDelete = id => {\n    personService\n      .deleteOne(id)\n      .then(response => {\n        setPersons(persons.filter(person => person.id !== id));\n        makeNotification('Deleted successfully', true);\n      })\n      .catch(err => {\n        makeNotification(`Couldn't delete`, false);\n      });\n  }\n\n  const makeNotification = (message, isSuccess) => {\n    setNotification(message);\n    setSuccess(isSuccess);\n    setTimeout(() => {\n      setNotification(null);\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} success={success} />\n      <Filter onFilterChange={handleFilterChange} />\n      <PersonForm\n        onSubmit={handleAddPerson}\n        name={newName}\n        number={newNumber}\n        onNameChange={(name) => setNewName(name)}\n        onNumberChange={(number) => setNewNumber(number)}\n      />\n\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} onDelete={handleDelete} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}